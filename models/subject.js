// Generated by CoffeeScript 1.6.3
(function() {
  var $, Api, BaseModel, Subject, _base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  if ((_base = window.zooniverse).models == null) {
    _base.models = {};
  }

  BaseModel = zooniverse.models.BaseModel || require('./base-model');

  Api = zooniverse.Api || require('../lib/api');

  $ = window.jQuery;

  Subject = (function(_super) {
    __extends(Subject, _super);

    Subject.current = null;

    Subject.seenThisSession = [];

    Subject.queueMin = 2;

    Subject.queueMax = 10;

    Subject.group = false;

    Subject.fallback = "./offline/subjects.json";

    Subject.path = function() {
      var groupString;
      groupString = !this.group ? '' : this.group === true ? 'groups/' : "groups/" + this.group + "/";
      return "workflows/533cd4dd4954738018030000/subjects";
    };

    Subject.next = function(done, fail) {
      var fetcher, nexter, _ref,
        _this = this;
      this.trigger('get-next');
      if ((_ref = this.current) != null) {
        _ref.destroy();
      }
      this.current = null;
      nexter = new $.Deferred;
      nexter.then(done, fail);
      if (this.count() === 0) {
        fetcher = this.fetch();
        fetcher.done(function(newSubjects) {
          var _ref1;
          if ((_ref1 = _this.first()) != null) {
            _ref1.select();
          }
          if (_this.current) {
            return nexter.resolve(_this.current);
          } else {
            _this.trigger('no-more');
            return nexter.reject.apply(nexter, arguments);
          }
        });
        fetcher.fail(function() {
          return nexter.reject.apply(nexter, arguments);
        });
      } else {
        this.first().select();
        nexter.resolve(this.current);
        if (this.count() < this.queueMin) {
          this.fetch();
        }
      }
      return nexter.promise();
    };

    Subject.trackSeenSubject = function(subject) {
      return this.seenThisSession.push(subject.id);
    };

    Subject.hasSeenSubject = function(subject) {
      var _ref;
      console.log("testing ", subject, this.seenThisSession);
      return _ref = subject.id, __indexOf.call(this.seenThisSession, _ref) >= 0;
    };

    Subject.fetch = function(params, done, fail) {
      var fetcher, limit, request, _ref,
        _this = this;
      if (typeof params === 'function') {
        _ref = [params, done, {}], done = _ref[0], fail = _ref[1], params = _ref[2];
      }
      limit = (params || {}).limit;
      if (limit == null) {
        limit = this.queueMax - this.count();
      }
      fetcher = new $.Deferred;
      fetcher.then(done, fail);
      if (limit > 0) {
        request = Api.current.get(this.path(), {
          limit: limit
        });
        request.done(function(rawSubjects) {
          var newSubjects, rawSubject;
          console.log("raw subjects ", rawSubjects);
          newSubjects = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = rawSubjects.length; _i < _len; _i++) {
              rawSubject = rawSubjects[_i];
              if (!(!this.hasSeenSubject(rawSubject))) {
                continue;
              }
              this.trackSeenSubject(rawSubject);
              console.log("here");
              _results.push(new this(rawSubject));
            }
            return _results;
          }).call(_this);
          console.log("new subjects ", newSubjects);
          while (!(_this.seenThisSession.length < 1000)) {
            _this.seenThisSession.shift();
          }
          _this.trigger('fetch', [newSubjects]);
          return fetcher.resolve(newSubjects);
        });
        request.fail(function() {
          var getFallback;
          _this.trigger('fetching-fallback');
          getFallback = $.get(_this.fallback);
          getFallback.done(function(rawSubjects) {
            var newSubjects, rawGroupSubjects, rawSubject, _i, _len;
            if (_this.group) {
              rawGroupSubjects = [];
              for (_i = 0, _len = rawSubjects.length; _i < _len; _i++) {
                rawSubject = rawSubjects[_i];
                if (rawSubject.group_id === _this.group) {
                  rawGroupSubjects.push(rawSubject);
                }
              }
              rawSubjects = rawGroupSubjects;
            }
            rawSubjects.sort(function() {
              return Math.random() - 0.5;
            });
            newSubjects = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = rawSubjects.length; _j < _len1; _j++) {
                rawSubject = rawSubjects[_j];
                _results.push(new this(rawSubject));
              }
              return _results;
            }).call(_this);
            _this.trigger('fetch', [newSubjects]);
            return fetcher.resolve(newSubjects);
          });
          return getFallback.fail(function() {
            _this.trigger('fetch-fail');
            return fetcher.fail.apply(fetcher, arguments);
          });
        });
      } else {
        fetcher.resolve(this.instances.slice(0, number));
      }
      return fetcher.promise();
    };

    Subject.prototype.id = '';

    Subject.prototype.zooniverse_id = '';

    Subject.prototype.classification_count = null;

    Subject.prototype.coords = null;

    Subject.prototype.location = null;

    Subject.prototype.metadata = null;

    Subject.prototype.project_id = '';

    Subject.prototype.group_id = '';

    Subject.prototype.workflow_ids = null;

    Subject.prototype.tutorial = null;

    Subject.prototype.preload = true;

    function Subject() {
      Subject.__super__.constructor.apply(this, arguments);
      console.log("Creating subject (trying)");
      if (this.location == null) {
        this.location = {};
      }
      if (this.coords == null) {
        this.coords = [];
      }
      if (this.metadata == null) {
        this.metadata = {};
      }
      if (this.workflow_ids == null) {
        this.workflow_ids = [];
      }
    }

    Subject.prototype.preloadImages = function() {
      var imageSources, src, type, _ref, _results;
      if (!this.preload) {
        return;
      }
      _ref = this.location;
      _results = [];
      for (type in _ref) {
        imageSources = _ref[type];
        if (!(imageSources instanceof Array)) {
          imageSources = [imageSources];
        }
        if (!this.isImage(imageSources)) {
          continue;
        }
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = imageSources.length; _i < _len; _i++) {
            src = imageSources[_i];
            _results1.push((new Image).src = src);
          }
          return _results1;
        })());
      }
      return _results;
    };

    Subject.prototype.select = function() {
      this.constructor.current = this;
      return this.trigger('select');
    };

    Subject.prototype.destroy = function() {
      if (this.constructor.current === this) {
        this.constructor.current = null;
      }
      return Subject.__super__.destroy.apply(this, arguments);
    };

    Subject.prototype.isImage = function(subjectLocation) {
      var src, _i, _len, _ref;
      for (_i = 0, _len = subjectLocation.length; _i < _len; _i++) {
        src = subjectLocation[_i];
        if (!((_ref = src.split('.').pop()) === 'gif' || _ref === 'jpg' || _ref === 'png')) {
          return false;
        }
      }
      return true;
    };

    Subject.prototype.talkHref = function() {
      var domain;
      domain = this.domain || location.hostname.replace(/^www\./, '');
      return "http://talk." + domain + "/#/subjects/" + this.zooniverse_id;
    };

    Subject.prototype.socialImage = function() {
      var image;
      image = this.location.standard instanceof Array ? this.location.standard[Math.floor(this.location.standard.length / 2)] : this.location.standard;
      return $("<a href='" + image + "'></a>").get(0).href;
    };

    Subject.prototype.socialTitle = function() {
      return 'Zooniverse classification';
    };

    Subject.prototype.socialMessage = function() {
      return 'Classifying on the Zooniverse!';
    };

    Subject.prototype.facebookHref = function() {
      return ("https://www.facebook.com/sharer/sharer.php\n?s=100\n&p[url]=" + (encodeURIComponent(this.talkHref())) + "\n&p[title]=" + (encodeURIComponent(this.socialTitle())) + "\n&p[summary]=" + (encodeURIComponent(this.socialMessage())) + "\n&p[images][0]=" + (this.socialMessage())).replace('\n', '', 'g');
    };

    Subject.prototype.twitterHref = function() {
      var status;
      status = "" + (this.socialMessage()) + " " + (this.talkHref());
      return "http://twitter.com/home?status=" + (encodeURIComponent(status));
    };

    Subject.prototype.pinterestHref = function() {
      return ("http://pinterest.com/pin/create/button/\n?url=" + (encodeURIComponent(this.talkHref())) + "\n&media=" + (encodeURIComponent(this.socialImage())) + "\n&description=" + (encodeURIComponent(this.socialMessage()))).replace('\n', '', 'g');
    };

    return Subject;

  })(BaseModel);

  window.zooniverse.models.Subject = Subject;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Subject;
  }

}).call(this);
