// Generated by CoffeeScript 1.6.3
(function() {
  var Api, EventEmitter, User, base64, _base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  if ((_base = window.zooniverse).models == null) {
    _base.models = {};
  }

  EventEmitter = window.zooniverse.EventEmitter || require('../lib/event-emitter');

  Api = window.zooniverse.Api || require('../lib/api');

  base64 = window.base64 || (require('../vendor/base64'), window.base64);

  User = (function(_super) {
    __extends(User, _super);

    User.current = false;

    User.path = function() {
      return '';
    };

    User.fetch = function() {
      var fetcher, _ref;
      User.trigger('fetching', arguments);
      fetcher = (_ref = Api.current).getJSON.apply(_ref, ["" + (User.path()) + "/current_user"].concat(__slice.call(arguments)));
      fetcher.always(User.onFetch);
      return fetcher;
    };

    User.login = function(_arg) {
      var login, password, username, _ref;
      username = _arg.username, password = _arg.password;
      this.trigger('logging-in', arguments);
      login = (_ref = Api.current).getJSON.apply(_ref, ["" + (this.path()) + "/login"].concat(__slice.call(arguments)));
      login.done(this.onFetch);
      login.fail(this.onFail);
      return login;
    };

    User.logout = function() {
      var logout, _ref;
      this.trigger('logging-out', arguments);
      logout = (_ref = Api.current).getJSON.apply(_ref, ["" + (this.path()) + "/logout"].concat(__slice.call(arguments)));
      logout.always(this.onFetch);
      return logout;
    };

    User.signup = function(_arg) {
      var email, password, signup, username, _ref;
      username = _arg.username, password = _arg.password, email = _arg.email;
      this.trigger('signing-up');
      signup = (_ref = Api.current).getJSON.apply(_ref, ["" + (this.path()) + "/signup"].concat(__slice.call(arguments)));
      signup.always(this.onFetch);
      return signup;
    };

    User.onFetch = function(result) {
      var auth, original;
      original = User.current;
      if (result.success && 'name' in result && 'api_key' in result) {
        User.current = new User(result);
      } else {
        User.current = null;
      }
      if (User.current) {
        auth = base64.encode("" + User.current.name + ":" + User.current.api_key);
        Api.current.headers['Authorization'] = "Basic " + auth;
      } else {
        delete Api.current.headers['Authorization'];
      }
      if (User.current !== original) {
        if (original) {
          original.destroy();
        }
        User.trigger('change', [User.current]);
      }
      if (!result.success) {
        return User.trigger('sign-in-error', result.message);
      }
    };

    User.onFail = function() {
      return User.trigger('sign-in-failure');
    };

    User.prototype.id = '';

    User.prototype.zooniverse_id = '';

    User.prototype.api_key = '';

    User.prototype.name = '';

    User.prototype.avatar = '';

    User.prototype.project = null;

    function User(params) {
      var property, value;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        this[property] = value;
      }
    }

    User.prototype.setGroup = function(groupId, callback) {
      var get, path, _ref,
        _this = this;
      if (User.current == null) {
        return;
      }
      path = groupId != null ? "/user_groups/" + groupId + "/participate" : "/user_groups/TODO_HOW_DO_I_LEAVE_A_GROUP/participate";
      get = (_ref = Api.current) != null ? _ref.getJSON(path, function(group) {
        _this.trigger('change-group', group);
        return typeof callback === "function" ? callback.apply(null, arguments) : void 0;
      }) : void 0;
      return get;
    };

    User.prototype.setPreference = function(key, value, global, callback) {
      var _base1, _base2, _name, _ref;
      if (global == null) {
        global = false;
      }
      if (User.current == null) {
        return;
      }
      if (typeof global === 'function') {
        _ref = [false, global], global = _ref[0], callback = _ref[1];
      }
      if ((_base1 = User.current).preferences == null) {
        _base1.preferences = {};
      }
      if (global) {
        User.current.preferences[key] = value;
      } else {
        if ((_base2 = User.current.preferences)[_name = Api.current.project] == null) {
          _base2[_name] = {};
        }
        User.current.preferences[Api.current.project][key] = value;
      }
      if (!global) {
        key = "" + Api.current.project + "." + key;
      }
      return Api.current.put("/users/preferences", {
        key: key,
        value: value
      }, callback);
    };

    User.prototype.deletePreference = function(key, global, callback) {
      var _base1, _base2, _name, _ref;
      if (global == null) {
        global = false;
      }
      if (User.current == null) {
        return;
      }
      if (typeof global === 'function') {
        _ref = [false, global], global = _ref[0], callback = _ref[1];
      }
      if ((_base1 = User.current).preferences == null) {
        _base1.preferences = {};
      }
      if (global) {
        delete User.current.preferences[key];
      } else {
        if ((_base2 = User.current.preferences)[_name = Api.current.project] == null) {
          _base2[_name] = {};
        }
        delete User.current.preferences[Api.current.project][key];
      }
      if (!global) {
        key = "" + Api.current.project + "." + key;
      }
      return Api.current["delete"]("/users/preferences", {
        key: key
      }, callback);
    };

    return User;

  }).call(this, EventEmitter);

  window.zooniverse.models.User = User;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = User;
  }

}).call(this);
